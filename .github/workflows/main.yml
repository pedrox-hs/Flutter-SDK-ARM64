name: Generate Flutter SDK for ARM64
on:
  workflow_dispatch:
    inputs:
      version:
        description: "Flutter SDK version"
        type: string
        required: true

jobs:
  build-flutter-sdk:
    name: Build Flutter SDK
    runs-on: ubuntu-latest
    needs:
      - build-flutter-engine
      - build-dart-sdk
      - dart-version
      - check-releases
    if: ${{ always() && needs.check-releases.outputs.has-flutter-sdk-tag == 'false' }}
    permissions:
      contents: write
    steps:
      - name: Maximize build space
        uses: easimon/maximize-build-space@v4
        with:
          root-reserve-mb: 512
          swap-size-mb: 1024
          remove-dotnet: "true"
          remove-haskell: "true"
          remove-android: "true"

      - name: Fetch Flutter Engine Github Release asset
        uses: dsaltares/fetch-gh-release-asset@1.1.0
        with:
          version: "tags/flutter_engine-${{ github.event.inputs.version }}"
          file: "flutter-engine.zip"

      - name: Fetch Dart SDK Github Release asset
        uses: dsaltares/fetch-gh-release-asset@1.1.0
        with:
          version: "tags/dart_sdk-${{ needs.dart-version.outputs.value }}"
          file: dart-sdk-linux-arm64.zip

      - name: Get & Init Flutter-SDK
        run: |
          git clone https://github.com/flutter/flutter.git --depth 1 \
            --branch ${{ github.event.inputs.version }}

      - name: Assemble Flutter-SDK-ARM
        run: |
          export PATH="$PATH:`pwd`/flutter/bin"
          
          export WORKDIR=`pwd`
          
          flutter_sdk_dir="$WORKDIR/flutter"
          flutter_engine_dir="$flutter_sdk_dir/bin/cache/artifacts/engine"
          flutter_engine_dir_debug="$flutter_engine_dir/linux-arm64-debug"
          flutter_engine_dir_release="$flutter_engine_dir/linux-arm64-release"
          
          dart_sdk_dir="$WORKDIR/ReleaseXARM64"
          
          unzip "flutter-engine.zip" -d "$flutter_engine_dir/"

          rsync -avP $dart_sdk_dir/dart-sdk $flutter_sdk_dir/bin/cache/

          mkdir -p $flutter_engine_dir/common/flutter_patched_sdk/
          rsync -avP $flutter_engine_dir_debug/flutter_patched_sdk $flutter_sdk_dir/bin/cache/artifacts/engine/common/flutter_patched_sdk/

          mkdir -p $flutter_engine_dir/common/flutter_patched_sdk_product/
          rsync -avP $flutter_engine_dir_release/flutter_patched_sdk $flutter_sdk_dir/bin/cache/artifacts/engine/common/flutter_patched_sdk_product/
          
          
          all_engines=("android-arm64-release" "android-arm64-profile" "android-arm64-debug" "android-arm-release" "android-arm-profile" "android-arm-debug" "android-x64-release" "android-x64-profile" "android-x64-debug")

          for engine in "${all_engines[@]}"; do
            mkdir -p $flutter_engine_dir/$engine/linux-arm64
            cp $dart_sdk_dir/dart-sdk/bin/utils/gen_snapshot $flutter_engine_dir/$engine/linux-arm64/
          done


      - name: Zip SDK
        run: |
          zip -q -r Flutter-SDK-ARM64.zip flutter

      - name: Release SDK
        uses: ncipollo/release-action@v1
        with:
          artifacts: "Flutter-SDK-ARM64.zip"
          tag: flutter_sdk-${{ github.event.inputs.version }}
          artifactErrorsFailBuild: true
          allowUpdates: true

  build-flutter-engine:
    name: Build Flutter Engine
    runs-on: ubuntu-latest
    needs: check-releases
    if: needs.check-releases.outputs.has-flutter-engine-tag == 'false'
    permissions:
      contents: write
    steps:
      - name: Maximize build space
        uses: easimon/maximize-build-space@v4
        with:
          root-reserve-mb: 512
          swap-size-mb: 1024
          remove-dotnet: "true"
          remove-haskell: "true"
          remove-android: "true"

      - name: Prepare Env
        run: |
          sudo apt-get update
          sudo apt-get install g++-aarch64-linux-gnu g++-arm-linux-gnueabihf
          sudo apt-get install g++-multilib gcc-multilib
          sudo apt-get install zip

      - name: Get Resource
        run: |
          git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git
          export PATH="$PATH:$PWD/depot_tools"
          mkdir flutter-engine
          cd flutter-engine
          echo 'solutions = [
            {
            "managed": False,
            "name": "src/flutter",
            "url": "https://github.com/flutter/engine",
            "custom_deps": {},
            "deps_file": "DEPS",
            "safesync_url": "",
            },
          ]' >> .gclient
          gclient sync

      - name: Build Engine
        run: |
          export PATH="$PATH:$PWD/depot_tools"
          cd flutter-engine/src

          all_engines=("linux-arm64-debug" "linux-arm64-release")

          for engine in "${all_engines[@]}"; do
            engine_args=(${engine//-/ })

            target_os=${engine_args[0]}
            linux_cpu=${engine_args[1]}
            runtime_mode=${engine_args[2]}
            out_dir=$(echo $engine | sed -E 's/linux-(.*)-debug/linux-\1/g')

            ./flutter/tools/gn --target-os $target_os --linux-cpu $linux_cpu --no-goma --runtime-mode $runtime_mode --target-dir $out_dir
            ls -l out
            ninja -C out/$out_dir
          done

          cp -R out/linux-arm64/{clang_x64/,}shader_lib

      - name: Zip Engine
        run: |
          cd flutter-engine/src/out
          ls -l
          zip -q -r "flutter-engine.zip" *

      - name: Release Engine
        uses: ncipollo/release-action@v1
        with:
          artifacts: "flutter-engine/src/out/*.zip"
          tag: flutter_engine-${{ github.event.inputs.version }}
          artifactErrorsFailBuild: true
          skipIfReleaseExists: true

  build-dart-sdk:
    name: Build Dart SDK
    runs-on: ubuntu-latest
    needs:
      - dart-version
      - check-releases
    if: needs.check-releases.outputs.has-dart-tag == 'false'
    permissions:
      contents: write
    steps:
      - name: Maximize build space
        uses: easimon/maximize-build-space@v4
        with:
          root-reserve-mb: 512
          swap-size-mb: 1024
          remove-dotnet: "true"
          remove-haskell: "true"
          remove-android: "true"

      - name: Prepare
        run: |
          sudo apt-get update
          sudo apt-get install g++-aarch64-linux-gnu g++-arm-linux-gnueabihf
          sudo apt-get install g++-multilib
          sudo apt-get install zip

      - name: Get Resource
        run: |
          git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git
          export PATH="$PATH:$PWD/depot_tools"
          mkdir dart-sdk
          cd dart-sdk
          fetch dart
          cd sdk
          git checkout $DART_VERSION
          echo "target_os = ['linux']" >> ../.gclient
          gclient sync
        env:
          DART_VERSION: ${{ needs.dart-version.outputs.value }}

      - name: Build SDK
        run: |
          export PATH="$PATH:$PWD/depot_tools"
          cd dart-sdk/sdk
          ./tools/build.py --no-goma -m release --arch=arm64 create_sdk

      - name: Zip SDK
        run: |
          cd dart-sdk/sdk/out
          zip -q -r dart-sdk-linux-arm64.zip ReleaseXARM64/dart-sdk

      - name: Release SDK
        uses: ncipollo/release-action@v1
        with:
          artifacts: "dart-sdk/sdk/out/*.zip"
          tag: dart_sdk-${{ needs.dart-version.outputs.value }}
          artifactErrorsFailBuild: true
          skipIfReleaseExists: true

  check-releases:
    name: Check if release versions exists
    runs-on: ubuntu-latest
    needs: dart-version
    outputs:
      has-dart-tag: ${{ steps.check-dart-tag.outputs.exists }}
      has-flutter-sdk-tag: ${{ steps.check-flutter-sdk-tag.outputs.exists }}
      has-flutter-engine-tag: ${{ steps.check-flutter-engine-tag.outputs.exists }}
    steps:
      - uses: mukunku/tag-exists-action@v1.2.0
        id: check-dart-tag
        with:
          tag: dart_sdk-${{ needs.dart-version.outputs.value }}

      - uses: mukunku/tag-exists-action@v1.2.0
        id: check-flutter-engine-tag
        with:
          tag: flutter_engine-${{ github.event.inputs.version }}

      - uses: mukunku/tag-exists-action@v1.2.0
        id: check-flutter-sdk-tag
        with:
          tag: flutter_sdk-${{ github.event.inputs.version }}

  dart-version:
    name: Get Dart version by Flutter version
    runs-on: ubuntu-latest
    outputs:
      value: ${{ steps.dart-sdk-version.outputs.value }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - id: dart-sdk-version
        name: Run script to get Dart SDK version by Flutter SDK version
        run: |
          dart_version=$(./bin/flutter-dart-version.sh)
          echo "value=$dart_version" >> $GITHUB_OUTPUT
          echo $dart_version
        env:
          FLUTTER_VERSION: ${{ github.event.inputs.version }}
